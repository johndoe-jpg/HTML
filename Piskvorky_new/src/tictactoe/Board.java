package tictactoe;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Point;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

/**
 *
 * @author THUND
 */
public class Board extends javax.swing.JPanel implements PropertyChangeListener {

    private String[][] board;
    
    /**
     * Creates new form Board
     */
    public Board() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        firePropertyChange("clickEvt", null, getTileFromClick(evt.getPoint()));
    }//GEN-LAST:event_formMouseReleased

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        if(board == null) {
            return;
        }
        
        int xc = board.length;
        int yc = board[0].length;
        
        int size = getHeight() / ((xc > yc) ? xc : yc);
        
        for (int i = 0; i < xc; i++) {
            for (int j = 0; j < yc; j++) {
                g.setColor(Color.darkGray);
                g.drawRect(i * size, j * size, size, size);
                if(board[i][j] != null && !board[i][j].equals("")) {
                    g.setColor(CharacterManager.getColorBySymbol(board[i][j]));
                    g.setFont(new Font(g.getFont().getFontName(), Font.BOLD, size));
                    int fontSize = (g.getFont().getSize());
                    g.drawString(board[i][j], i * size + fontSize / 5, j * size + fontSize - fontSize / 8);
                }
            }
        }
    }
    
    private Point getTileFromClick(Point click) {
        if(board == null) {
            return null;
        }
        
        int xc = board.length;
        int yc = board[0].length;
        
        int size = getHeight() / ((xc > yc) ? xc : yc);
        
        Point dest = new Point(click.x / size, click.y / size);
        
        if(dest.x >= xc || dest.y >= yc || dest.x < 0 || dest.y < 0) {
            return null;
        } else {
            return dest;
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent pce) {
        if(pce.getPropertyName().equals("repaint")) {
            board = (String[][]) pce.getNewValue();
            repaint();
        }
    }

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
