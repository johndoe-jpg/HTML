package snake_machado;

import java.awt.Color;
import java.awt.Graphics;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

/**
 *
 * @author THUND
 */
public class BoardPainter extends javax.swing.JPanel implements PropertyChangeListener {

    private int[][] board;
    private final Color green = new Color(0x0B8407);
    private final Color red = new Color(0xB50711);

    /**
     * Creates new form BoardPainter
     */
    public BoardPainter() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (board == null || board.length == 0 || board[0].length == 0) {
            return;
        }

        int xs = board.length;
        int ys = board[0].length;

        int ts = (xs > ys) ? getWidth() / xs : getWidth() / ys;// Tile size

        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                /**
                 * 0 - air
                 * 1 - snake
                 * 2 - apple
                 * 3 - head north
                 * 4 - head east
                 * 5 - head south
                 * 6 - head west
                 */

                // full tile
                switch (board[i][j]) {
                    case 0:
                        g.setColor(green);
                        break;
                    case 1:
                        g.setColor(Color.black);
                        break;
                    case 2:
                        g.setColor(red);
                        break;
                    default:
                        g.setColor(green);
                }
                g.fillRect(i * ts, j * ts, ts, ts);

                int[] xC = new int[3];
                int[] yC = new int[3];

                // head arrow
                switch (board[i][j]) {
                    case 3:
                        xC[0] = i * ts;
                        yC[0] = j * ts + ts;
                        
                        xC[1] = i * ts + ts;
                        yC[1] = j * ts + ts;
                        
                        xC[2] = i * ts + ts / 2;
                        yC[2] = j * ts;
                        break;
                    case 6:
                        xC[0] = i * ts;
                        yC[0] = j * ts;
                        
                        xC[1] = i * ts;
                        yC[1] = j * ts + ts;
                        
                        xC[2] = i * ts + ts;
                        yC[2] = j * ts + ts / 2;
                        break;
                    case 5:
                        xC[0] = i * ts;
                        yC[0] = j * ts;
                        
                        xC[1] = i * ts + ts;
                        yC[1] = j * ts;
                        
                        xC[2] = i * ts + ts / 2;
                        yC[2] = j * ts + ts;
                        break;
                    case 4:
                        xC[0] = i * ts + ts;
                        yC[0] = j * ts;
                        
                        xC[1] = i * ts + ts;
                        yC[1] = j * ts + ts;
                        
                        xC[2] = i * ts;
                        yC[2] = j * ts + ts / 2;
                        break;
                    default:
                }
                g.setColor(Color.black);

                g.fillPolygon(xC, yC, 3);
            }
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent pce) {
        if (pce.getPropertyName().equals("paintBoard")) {
            board = (int[][]) pce.getNewValue();
            repaint();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
